(blocco
  (define fibonacci 
    (lambda (n) (cond ((= n 1) 1)
                      ((= n 2) 1)
                      (else (+ (fibonacci (- n 1)) (fibonacci (- n 2))))
                      )
      )
    )

  (define pow
    (lambda (a b) (cond ((= b 0) 1)
                        ((= (modulo b 2) 0) (square (pow a (/ b 2))))
                        (else (* a (pow a (- b 1))))
                        )
      )
    )

  (define square
    (lambda (a) (* a a)))

  (define abs 
    (lambda (x) (cond ((< x 0) (- 0 x))
                      (else x))))

  (define map
    (lambda (f seq) (cond ((null? seq) (crea ()))
                          (else (costruisci (f (primo seq)) (map f (resto seq))))
                          )
      )
    )

  (define filter
    (lambda (pred seq) 
                         (cond ((null? seq) (crea ()))
                             ((= (pred (primo seq)) True) (costruisci (primo seq) (filter pred (resto seq))))
                             (else (filter pred (resto seq)))
                             )
      )
    )

  (define range
    (lambda (start stop)
      (cond ((> start stop) (crea ()))
            (else (costruisci start (range (+ 1 start) stop)))
            )
      )
    )

  (define accumulate
    (lambda (op va_iniziale seq) (cond ((null? seq) va_iniziale)
                                       (else (op (primo seq) (accumulate op va_iniziale (resto seq))))
                                       )
      )
    )

  (define fattoriale
    (lambda (n) (accumulate * 1 (range 2 n))))

  (define bisezione
    (lambda (f pos neg e)
            (blocco
              (define midpoint (/ (+ pos neg) 2))
              (cond ((< (abs (f midpoint)) e) midpoint)
                    ((> (f midpoint) 0) (bisezione f midpoint neg e))
                    (else (bisezione f pos midpoint e))
                  )
              )
            )
    )

  (define sqrt
    (lambda (n)
      (bisezione (lambda (x) (- (* x x) n)) n 0.0 0.00000000001)
      )
    )
)
